// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: payload/schema.proto

package payload

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GrpcSink_Receive_FullMethodName = "/payload.GrpcSink/Receive"
)

// GrpcSinkClient is the client API for GrpcSink service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcSinkClient interface {
	Receive(ctx context.Context, in *Flag, opts ...grpc.CallOption) (*FlagReply, error)
}

type grpcSinkClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcSinkClient(cc grpc.ClientConnInterface) GrpcSinkClient {
	return &grpcSinkClient{cc}
}

func (c *grpcSinkClient) Receive(ctx context.Context, in *Flag, opts ...grpc.CallOption) (*FlagReply, error) {
	out := new(FlagReply)
	err := c.cc.Invoke(ctx, GrpcSink_Receive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcSinkServer is the server API for GrpcSink service.
// All implementations must embed UnimplementedGrpcSinkServer
// for forward compatibility
type GrpcSinkServer interface {
	Receive(context.Context, *Flag) (*FlagReply, error)
	mustEmbedUnimplementedGrpcSinkServer()
}

// UnimplementedGrpcSinkServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcSinkServer struct {
}

func (UnimplementedGrpcSinkServer) Receive(context.Context, *Flag) (*FlagReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedGrpcSinkServer) mustEmbedUnimplementedGrpcSinkServer() {}

// UnsafeGrpcSinkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcSinkServer will
// result in compilation errors.
type UnsafeGrpcSinkServer interface {
	mustEmbedUnimplementedGrpcSinkServer()
}

func RegisterGrpcSinkServer(s grpc.ServiceRegistrar, srv GrpcSinkServer) {
	s.RegisterService(&GrpcSink_ServiceDesc, srv)
}

func _GrpcSink_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Flag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcSinkServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcSink_Receive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcSinkServer).Receive(ctx, req.(*Flag))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcSink_ServiceDesc is the grpc.ServiceDesc for GrpcSink service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcSink_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payload.GrpcSink",
	HandlerType: (*GrpcSinkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Receive",
			Handler:    _GrpcSink_Receive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payload/schema.proto",
}
